name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build-and-push:
    # Only run if PR was merged and came from a release branch
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
      
      - name: Create source code archives
        run: |
          # Create zip archive
          git archive --format=zip --output=git-commit-analyzer-${{ steps.extract_version.outputs.version }}.zip HEAD
          
          # Create tar.gz archive
          git archive --format=tar.gz --output=git-commit-analyzer-${{ steps.extract_version.outputs.version }}.tar.gz HEAD
      
      - name: Prepare release notes
        id: release_notes
        run: |
          # Get PR body as release notes
          PR_BODY="${{ github.event.pull_request.body }}"
          
          # If PR body is empty, use a default message
          if [ -z "$PR_BODY" ]; then
            PR_BODY="Release ${{ steps.extract_version.outputs.version }}"
          fi
          
          # Save to file to handle multiline content properly
          echo "$PR_BODY" > release_notes.txt
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_version.outputs.version }}
          name: Release ${{ steps.extract_version.outputs.version }}
          body_path: release_notes.txt
          files: |
            git-commit-analyzer-${{ steps.extract_version.outputs.version }}.zip
            git-commit-analyzer-${{ steps.extract_version.outputs.version }}.tar.gz
          draft: false
          prerelease: false
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
